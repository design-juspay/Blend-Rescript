// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LucideReact from "lucide-react";
import * as JsxRuntime from "react/jsx-runtime";
import * as DesignSystem from "@vinitjuspay/design-system";

var Types = {};

var DSMenuDropdown = {};

function MenuDropdownDemo$MenuDropdownDemo(props) {
  var match = React.useState(function () {
        return "";
      });
  var setSelectedSingleItem = match[1];
  var selectedSingleItem = match[0];
  var match$1 = React.useState(function () {
        return [];
      });
  var setSelectedMultiItems = match$1[1];
  var selectedMultiItems = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setIsMultiDropdownOpen = match$2[1];
  var isMultiDropdownOpen = match$2[0];
  var match$3 = React.useState(function () {
        return false;
      });
  var setIsMultiTextDropdownOpen = match$3[1];
  var match$4 = React.useState(function () {
        return false;
      });
  var setIsMultiCountDropdownOpen = match$4[1];
  var basicMenuItems = [
    {
      id: "1",
      text: "Profile",
      className: undefined,
      disabled: undefined,
      type_: "DEFAULT",
      state: undefined,
      action: undefined,
      onClick: undefined,
      onMouseEnter: undefined,
      onMouseLeave: undefined,
      hasSlotL: true,
      hasSlotR1: undefined,
      hasSlotR2: undefined,
      slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.User, {
                size: 16
              })),
      slotR1: undefined,
      slotR2: undefined,
      hasShortcut: undefined,
      shortcutValue: undefined,
      isMultiSelect: undefined,
      isSelected: undefined,
      hasSubmenu: undefined,
      submenuItems: undefined,
      parentId: undefined
    },
    {
      id: "2",
      text: "Settings",
      className: undefined,
      disabled: undefined,
      type_: "DEFAULT",
      state: undefined,
      action: undefined,
      onClick: undefined,
      onMouseEnter: undefined,
      onMouseLeave: undefined,
      hasSlotL: true,
      hasSlotR1: undefined,
      hasSlotR2: undefined,
      slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.Settings, {
                size: 16
              })),
      slotR1: undefined,
      slotR2: undefined,
      hasShortcut: undefined,
      shortcutValue: undefined,
      isMultiSelect: undefined,
      isSelected: undefined,
      hasSubmenu: undefined,
      submenuItems: undefined,
      parentId: undefined
    },
    {
      id: "3",
      text: "Help",
      className: undefined,
      disabled: undefined,
      type_: "DEFAULT",
      state: undefined,
      action: undefined,
      onClick: undefined,
      onMouseEnter: undefined,
      onMouseLeave: undefined,
      hasSlotL: true,
      hasSlotR1: undefined,
      hasSlotR2: undefined,
      slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.HelpCircle, {
                size: 16
              })),
      slotR1: undefined,
      slotR2: undefined,
      hasShortcut: undefined,
      shortcutValue: undefined,
      isMultiSelect: undefined,
      isSelected: undefined,
      hasSubmenu: undefined,
      submenuItems: undefined,
      parentId: undefined
    }
  ];
  var getMultiSelectMenuItems = function () {
    return [
            {
              id: "1",
              text: "Option 1",
              className: undefined,
              disabled: undefined,
              type_: "MULTI_SELECT",
              state: undefined,
              action: undefined,
              onClick: undefined,
              onMouseEnter: undefined,
              onMouseLeave: undefined,
              hasSlotL: true,
              hasSlotR1: true,
              hasSlotR2: undefined,
              slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.User, {
                        size: 16
                      })),
              slotR1: Caml_option.some(JsxRuntime.jsx(DesignSystem.Checkbox, {
                        isChecked: Belt_Array.some(selectedMultiItems, (function (id) {
                                return id === "1";
                              })),
                        isDisabled: false,
                        className: "ml-2"
                      })),
              slotR2: undefined,
              hasShortcut: undefined,
              shortcutValue: undefined,
              isMultiSelect: true,
              isSelected: Belt_Array.some(selectedMultiItems, (function (id) {
                      return id === "1";
                    })),
              hasSubmenu: undefined,
              submenuItems: undefined,
              parentId: undefined
            },
            {
              id: "2",
              text: "Option 2",
              className: undefined,
              disabled: undefined,
              type_: "MULTI_SELECT",
              state: undefined,
              action: undefined,
              onClick: undefined,
              onMouseEnter: undefined,
              onMouseLeave: undefined,
              hasSlotL: true,
              hasSlotR1: true,
              hasSlotR2: undefined,
              slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.Settings, {
                        size: 16
                      })),
              slotR1: Caml_option.some(JsxRuntime.jsx(DesignSystem.Checkbox, {
                        isChecked: Belt_Array.some(selectedMultiItems, (function (id) {
                                return id === "2";
                              })),
                        isDisabled: false,
                        className: "ml-2"
                      })),
              slotR2: undefined,
              hasShortcut: undefined,
              shortcutValue: undefined,
              isMultiSelect: true,
              isSelected: Belt_Array.some(selectedMultiItems, (function (id) {
                      return id === "2";
                    })),
              hasSubmenu: undefined,
              submenuItems: undefined,
              parentId: undefined
            },
            {
              id: "3",
              text: "Option 3",
              className: undefined,
              disabled: undefined,
              type_: "MULTI_SELECT",
              state: undefined,
              action: undefined,
              onClick: undefined,
              onMouseEnter: undefined,
              onMouseLeave: undefined,
              hasSlotL: true,
              hasSlotR1: true,
              hasSlotR2: undefined,
              slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.HelpCircle, {
                        size: 16
                      })),
              slotR1: Caml_option.some(JsxRuntime.jsx(DesignSystem.Checkbox, {
                        isChecked: Belt_Array.some(selectedMultiItems, (function (id) {
                                return id === "3";
                              })),
                        isDisabled: false,
                        className: "ml-2"
                      })),
              slotR2: undefined,
              hasShortcut: undefined,
              shortcutValue: undefined,
              isMultiSelect: true,
              isSelected: Belt_Array.some(selectedMultiItems, (function (id) {
                      return id === "3";
                    })),
              hasSubmenu: undefined,
              submenuItems: undefined,
              parentId: undefined
            }
          ];
  };
  var currentMultiSelectMenuItems = getMultiSelectMenuItems();
  var handleSelect = function (item) {
    var id = Belt_Option.getWithDefault(item.id, "");
    setSelectedSingleItem(function (param) {
          return id;
        });
    console.log("Selected item:", id);
  };
  var toggleSelection = function (id) {
    var isCurrentlySelected = Belt_Array.some(selectedMultiItems, (function (itemId) {
            return itemId === id;
          }));
    if (isCurrentlySelected) {
      var newItems = Belt_Array.keep(selectedMultiItems, (function (itemId) {
              return itemId !== id;
            }));
      setSelectedMultiItems(function (param) {
            return newItems;
          });
      console.log("Removed item " + id + " from selections");
      return ;
    }
    var newItems$1 = Belt_Array.concat(selectedMultiItems, [id]);
    setSelectedMultiItems(function (param) {
          return newItems$1;
        });
    console.log("Added item " + id + " to selections");
  };
  var handleMultiSelect = function (items) {
    console.log("onSelectedItemsChange called with: " + Belt_Array.joinWith(items, ", ", (function (x) {
                return x;
              })));
    setSelectedMultiItems(function (param) {
          return items;
        });
    setIsMultiDropdownOpen(function (param) {
          return true;
        });
    setIsMultiTextDropdownOpen(function (param) {
          return true;
        });
    setIsMultiCountDropdownOpen(function (param) {
          return true;
        });
  };
  var handleMultiSelectItemClick = function (item) {
    var id = Belt_Option.getWithDefault(item.id, "");
    console.log("Item clicked: " + id);
    toggleSelection(id);
    setIsMultiDropdownOpen(function (param) {
          return true;
        });
    setIsMultiTextDropdownOpen(function (param) {
          return true;
        });
    setIsMultiCountDropdownOpen(function (param) {
          return true;
        });
  };
  var handleMultiDropdownOpenChange = function (isOpen) {
    setIsMultiDropdownOpen(function (param) {
          return isOpen;
        });
  };
  var handleMultiTextDropdownOpenChange = function (isOpen) {
    setIsMultiTextDropdownOpen(function (param) {
          return isOpen;
        });
  };
  var handleMultiCountDropdownOpenChange = function (isOpen) {
    setIsMultiCountDropdownOpen(function (param) {
          return isOpen;
        });
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("h1", {
                      children: "MenuDropdown Examples",
                      className: "text-2xl font-bold"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        null,
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h3", {
                                      children: "Single Select Dropdown",
                                      className: "font-medium mb-3"
                                    }),
                                JsxRuntime.jsx(DesignSystem.Dropdown, {
                                      menuItems: basicMenuItems,
                                      label: "Single Select",
                                      placeholder: "Choose an option",
                                      className: "min-w-[200px]",
                                      type_: "singleSelect",
                                      subType: "hasContainer",
                                      hasLabel: true,
                                      hasHint: true,
                                      hint: "Select from the available options",
                                      selectedOption: selectedSingleItem,
                                      onSelect: handleSelect
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: "Selected item: " + selectedSingleItem,
                                      className: "mt-3 text-sm text-gray-600"
                                    })
                              ],
                              className: "border p-4 rounded"
                            }),
                        null,
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h3", {
                                      children: "Icon Only Dropdown",
                                      className: "font-medium mb-3"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx(DesignSystem.Dropdown, {
                                              menuItems: basicMenuItems,
                                              label: "",
                                              value: "",
                                              placeholder: "",
                                              className: "w-auto",
                                              buttonClassName: "flex items-center justify-center",
                                              menuClassName: "min-w-[200px]",
                                              type_: "iconOnly",
                                              subType: "noContainer",
                                              selectionType: "text",
                                              hasLabel: false,
                                              hasLeftIcon: true,
                                              leftIcon: Caml_option.some(JsxRuntime.jsx(LucideReact.Settings, {
                                                        size: 16
                                                      })),
                                              onSelect: handleSelect,
                                              position: "bottom-start",
                                              offset: 0
                                            }),
                                        JsxRuntime.jsx("p", {
                                              children: "Click the icon to open",
                                              className: "mt-2 text-sm text-gray-600"
                                            })
                                      ],
                                      className: "flex flex-col items-start"
                                    })
                              ],
                              className: "border p-4 rounded"
                            }),
                        null,
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h3", {
                                      children: "Multi Select Dropdown",
                                      className: "font-medium mb-3"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("button", {
                                              children: "Open Dropdown",
                                              className: "px-3 py-1 bg-blue-500 text-white rounded text-sm",
                                              onClick: (function (param) {
                                                  setIsMultiDropdownOpen(function (param) {
                                                        return true;
                                                      });
                                                })
                                            }),
                                        JsxRuntime.jsx("button", {
                                              children: "Select All",
                                              className: "px-3 py-1 bg-green-500 text-white rounded text-sm",
                                              onClick: (function (param) {
                                                  var allOptions = [
                                                    "1",
                                                    "2",
                                                    "3"
                                                  ];
                                                  setSelectedMultiItems(function (param) {
                                                        return allOptions;
                                                      });
                                                  console.log("Manually selected all options");
                                                })
                                            }),
                                        JsxRuntime.jsx("button", {
                                              children: "Clear All",
                                              className: "px-3 py-1 bg-red-500 text-white rounded text-sm",
                                              onClick: (function (param) {
                                                  setSelectedMultiItems(function (param) {
                                                        return [];
                                                      });
                                                  console.log("Cleared all selections");
                                                })
                                            })
                                      ],
                                      className: "flex space-x-2 mb-2"
                                    }),
                                JsxRuntime.jsx(DesignSystem.Dropdown, {
                                      menuItems: currentMultiSelectMenuItems,
                                      label: "Multi Select",
                                      placeholder: "Select options",
                                      className: "min-w-[200px]",
                                      isOpen: isMultiDropdownOpen,
                                      onOpenChange: handleMultiDropdownOpenChange,
                                      type_: "multiSelect",
                                      subType: "hasContainer",
                                      selectedItems: selectedMultiItems,
                                      onSelectedItemsChange: handleMultiSelect,
                                      selectionType: "text",
                                      hasLabel: true,
                                      hasClearButton: true,
                                      onClear: (function () {
                                          setSelectedMultiItems(function (param) {
                                                return [];
                                              });
                                        }),
                                      onItemClick: handleMultiSelectItemClick,
                                      closeOnSelect: false
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: "Selected: " + Belt_Array.joinWith(selectedMultiItems, ", ", (function (x) {
                                              return x;
                                            })),
                                      className: "mt-3 text-sm text-gray-600"
                                    })
                              ],
                              className: "border p-4 rounded"
                            })
                      ],
                      className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        null,
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h3", {
                                      children: "Size Variants",
                                      className: "font-medium mb-3"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx(DesignSystem.Dropdown, {
                                              menuItems: basicMenuItems,
                                              label: "Small Size",
                                              className: "min-w-[200px]",
                                              size: "sm",
                                              type_: "singleSelect",
                                              subType: "hasContainer",
                                              hasLabel: true
                                            }),
                                        JsxRuntime.jsx(DesignSystem.Dropdown, {
                                              menuItems: basicMenuItems,
                                              label: "Medium Size (Default)",
                                              className: "min-w-[200px]",
                                              size: "md",
                                              type_: "singleSelect",
                                              subType: "hasContainer",
                                              hasLabel: true
                                            }),
                                        JsxRuntime.jsx(DesignSystem.Dropdown, {
                                              menuItems: basicMenuItems,
                                              label: "Large Size",
                                              className: "min-w-[200px]",
                                              size: "lg",
                                              type_: "singleSelect",
                                              subType: "hasContainer",
                                              hasLabel: true
                                            })
                                      ],
                                      className: "space-y-4"
                                    })
                              ],
                              className: "border p-4 rounded"
                            }),
                        null,
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h3", {
                                      children: "Multi-Select Display Types",
                                      className: "font-medium mb-3"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsx("button", {
                                                      children: "Open Text Dropdown",
                                                      className: "mb-2 px-3 py-1 bg-blue-500 text-white rounded text-sm",
                                                      onClick: (function (param) {
                                                          setIsMultiTextDropdownOpen(function (param) {
                                                                return true;
                                                              });
                                                        })
                                                    }),
                                                JsxRuntime.jsx(DesignSystem.Dropdown, {
                                                      menuItems: currentMultiSelectMenuItems,
                                                      label: "Show as Text",
                                                      className: "min-w-[200px]",
                                                      isOpen: match$3[0],
                                                      onOpenChange: handleMultiTextDropdownOpenChange,
                                                      type_: "multiSelect",
                                                      subType: "hasContainer",
                                                      selectedItems: selectedMultiItems,
                                                      onSelectedItemsChange: handleMultiSelect,
                                                      selectionType: "text",
                                                      hasLabel: true,
                                                      onItemClick: handleMultiSelectItemClick,
                                                      closeOnSelect: false
                                                    })
                                              ]
                                            }),
                                        JsxRuntime.jsxs("div", {
                                              children: [
                                                JsxRuntime.jsx("button", {
                                                      children: "Open Count Dropdown",
                                                      className: "mb-2 px-3 py-1 bg-blue-500 text-white rounded text-sm",
                                                      onClick: (function (param) {
                                                          setIsMultiCountDropdownOpen(function (param) {
                                                                return true;
                                                              });
                                                        })
                                                    }),
                                                JsxRuntime.jsx(DesignSystem.Dropdown, {
                                                      menuItems: currentMultiSelectMenuItems,
                                                      label: "Show as Count",
                                                      className: "min-w-[200px]",
                                                      isOpen: match$4[0],
                                                      onOpenChange: handleMultiCountDropdownOpenChange,
                                                      type_: "multiSelect",
                                                      subType: "hasContainer",
                                                      selectedItems: selectedMultiItems,
                                                      onSelectedItemsChange: handleMultiSelect,
                                                      selectionType: "count",
                                                      hasLabel: true,
                                                      onItemClick: handleMultiSelectItemClick,
                                                      closeOnSelect: false
                                                    })
                                              ]
                                            })
                                      ],
                                      className: "space-y-4"
                                    })
                              ],
                              className: "border p-4 rounded"
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h3", {
                                      children: "Controlled Multi-Select Items",
                                      className: "font-medium mb-3"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: Belt_Array.map([
                                            "1",
                                            "2",
                                            "3"
                                          ], (function (id) {
                                              var isSelected = Belt_Array.some(selectedMultiItems, (function (itemId) {
                                                      return itemId === id;
                                                    }));
                                              return JsxRuntime.jsx("button", {
                                                          children: "Option " + id + " " + (
                                                            isSelected ? "✓" : ""
                                                          ),
                                                          className: "px-3 py-1 rounded text-sm " + (
                                                            isSelected ? "bg-blue-500 text-white" : "bg-gray-200"
                                                          ),
                                                          onClick: (function (param) {
                                                              toggleSelection(id);
                                                            })
                                                        }, id);
                                            })),
                                      className: "flex flex-wrap gap-2 mb-4"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: "Selected items: " + Belt_Array.joinWith(selectedMultiItems, ", ", (function (x) {
                                              return x;
                                            })),
                                      className: "text-sm text-gray-600 mb-2"
                                    }),
                                JsxRuntime.jsx("button", {
                                      children: "Open Dropdown",
                                      className: "px-3 py-1 bg-blue-500 text-white rounded text-sm mr-2",
                                      onClick: (function (param) {
                                          setIsMultiDropdownOpen(function (param) {
                                                return true;
                                              });
                                        })
                                    }),
                                JsxRuntime.jsx(DesignSystem.Dropdown, {
                                      menuItems: currentMultiSelectMenuItems,
                                      label: "Controlled Multi-Select",
                                      className: "min-w-[200px]",
                                      isOpen: isMultiDropdownOpen,
                                      onOpenChange: handleMultiDropdownOpenChange,
                                      type_: "multiSelect",
                                      subType: "hasContainer",
                                      selectedItems: selectedMultiItems,
                                      onSelectedItemsChange: handleMultiSelect,
                                      selectionType: "text",
                                      hasLabel: true,
                                      onItemClick: handleMultiSelectItemClick,
                                      closeOnSelect: false
                                    })
                              ],
                              className: "border p-4 rounded mt-8"
                            })
                      ],
                      className: "grid grid-cols-1 md:grid-cols-2 gap-6 mt-8"
                    })
              ],
              className: "p-4 space-y-8"
            });
}

var MenuDropdownDemo = {
  make: MenuDropdownDemo$MenuDropdownDemo
};

var $$default = MenuDropdownDemo$MenuDropdownDemo;

export {
  Types ,
  DSMenuDropdown ,
  MenuDropdownDemo ,
  $$default as default,
}
/* react Not a pure module */
