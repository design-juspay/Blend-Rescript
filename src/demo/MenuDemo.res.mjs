// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as LucideReact from "lucide-react";
import * as JsxRuntime from "react/jsx-runtime";
import * as DesignSystem from "@vinitjuspay/design-system";

function createSeparator(idOpt) {
  var id = idOpt !== undefined ? idOpt : "separator";
  return {
          id: id,
          text: "",
          className: "py-0 my-1 border-b border-gray-200",
          type_: "SEPARATOR"
        };
}

function createMultiSelectItem(id, text, disabledOpt) {
  var disabled = disabledOpt !== undefined ? disabledOpt : false;
  return {
          id: id,
          text: text,
          disabled: disabled,
          type_: "MULTI_SELECT",
          isMultiSelect: true
        };
}

function MenuDemo(props) {
  var match = React.useState(function () {
        return "";
      });
  var setSearchTerm = match[1];
  var match$1 = React.useState(function () {
        return [];
      });
  var setSelectedItems = match$1[1];
  var selectedItems = match$1[0];
  var match$2 = React.useState(function () {
        return false;
      });
  var setIsOpen = match$2[1];
  var isOpen = match$2[0];
  var basicMenuItems = [
    {
      id: "item1",
      text: "Home",
      onClick: (function () {
          console.log("Home clicked");
        })
    },
    {
      id: "item2",
      text: "Profile",
      onClick: (function () {
          console.log("Profile clicked");
        })
    },
    {
      id: "item3",
      text: "Settings",
      onClick: (function () {
          console.log("Settings clicked");
        })
    },
    {
      id: "item4",
      text: "Help",
      onClick: (function () {
          console.log("Help clicked");
        })
    },
    {
      id: "item5",
      text: "Logout",
      action: "DANGER",
      onClick: (function () {
          console.log("Logout clicked");
        })
    }
  ];
  var menuItemsWithIcons = [
    {
      id: "home",
      text: "Home",
      onClick: (function () {
          console.log("Home clicked");
        }),
      hasSlotL: true,
      slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.Home, {
                size: 16
              }))
    },
    {
      id: "profile",
      text: "Profile",
      onClick: (function () {
          console.log("Profile clicked");
        }),
      hasSlotL: true,
      slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.User, {
                size: 16
              }))
    },
    {
      id: "settings",
      text: "Settings",
      onClick: (function () {
          console.log("Settings clicked");
        }),
      hasSlotL: true,
      slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.Settings, {
                size: 16
              }))
    },
    createSeparator("separator1"),
    {
      id: "logout",
      text: "Logout",
      action: "DANGER",
      onClick: (function () {
          console.log("Logout clicked");
        }),
      hasSlotL: true,
      slotL: Caml_option.some(JsxRuntime.jsx(LucideReact.LogOut, {
                size: 16
              }))
    }
  ];
  var handleMultiSelectItemClick = function (itemId) {
    setSelectedItems(function (prev) {
          var isSelected = Belt_Array.some(prev, (function (id) {
                  return id === itemId;
                }));
          if (isSelected) {
            return Belt_Array.keep(prev, (function (id) {
                          return id !== itemId;
                        }));
          } else {
            return Belt_Array.concat(prev, [itemId]);
          }
        });
    console.log("Multi-select item toggled:");
    console.log(itemId);
  };
  var multiSelectMenuItems = [
    {
      id: "option1",
      text: "Option 1",
      type_: "MULTI_SELECT",
      onClick: (function () {
          handleMultiSelectItemClick("option1");
        }),
      hasSlotR1: true,
      slotR1: Caml_option.some(JsxRuntime.jsx(DesignSystem.Checkbox, {
                isChecked: Belt_Array.some(selectedItems, (function (id) {
                        return id === "option1";
                      })),
                size: "sm"
              })),
      isMultiSelect: true
    },
    {
      id: "option2",
      text: "Option 2",
      type_: "MULTI_SELECT",
      onClick: (function () {
          handleMultiSelectItemClick("option2");
        }),
      hasSlotR1: true,
      slotR1: Caml_option.some(JsxRuntime.jsx(DesignSystem.Checkbox, {
                isChecked: Belt_Array.some(selectedItems, (function (id) {
                        return id === "option2";
                      })),
                size: "sm"
              })),
      isMultiSelect: true
    },
    {
      id: "option3",
      text: "Option 3",
      type_: "MULTI_SELECT",
      onClick: (function () {
          handleMultiSelectItemClick("option3");
        }),
      hasSlotR1: true,
      slotR1: Caml_option.some(JsxRuntime.jsx(DesignSystem.Checkbox, {
                isChecked: Belt_Array.some(selectedItems, (function (id) {
                        return id === "option3";
                      })),
                size: "sm"
              })),
      isMultiSelect: true
    },
    {
      id: "option4",
      text: "Option 4",
      disabled: true,
      type_: "MULTI_SELECT",
      onClick: (function () {
          handleMultiSelectItemClick("option4");
        }),
      hasSlotR1: true,
      slotR1: Caml_option.some(JsxRuntime.jsx(DesignSystem.Checkbox, {
                isChecked: Belt_Array.some(selectedItems, (function (id) {
                        return id === "option4";
                      })),
                isDisabled: true,
                size: "sm"
              })),
      isMultiSelect: true
    }
  ];
  var nestedMenuItems = [
    {
      id: "file",
      text: "File",
      hasSubmenu: true,
      submenuItems: [
        {
          id: "new",
          text: "New",
          hasSubmenu: true,
          submenuItems: [
            {
              id: "document",
              text: "Document",
              onClick: (function () {
                  console.log("New Document");
                })
            },
            {
              id: "spreadsheet",
              text: "Spreadsheet",
              onClick: (function () {
                  console.log("New Spreadsheet");
                })
            },
            {
              id: "presentation",
              text: "Presentation",
              onClick: (function () {
                  console.log("New Presentation");
                })
            }
          ]
        },
        {
          id: "open",
          text: "Open",
          onClick: (function () {
              console.log("Open");
            })
        },
        {
          id: "save",
          text: "Save",
          onClick: (function () {
              console.log("Save");
            })
        },
        createSeparator("save-exit-separator"),
        {
          id: "exit",
          text: "Exit",
          action: "DANGER",
          onClick: (function () {
              console.log("Exit");
            })
        }
      ]
    },
    {
      id: "edit",
      text: "Edit",
      hasSubmenu: true,
      submenuItems: [
        {
          id: "undo",
          text: "Undo",
          onClick: (function () {
              console.log("Undo");
            }),
          hasShortcut: true,
          shortcutValue: "⌘Z"
        },
        {
          id: "redo",
          text: "Redo",
          onClick: (function () {
              console.log("Redo");
            }),
          hasShortcut: true,
          shortcutValue: "⌘Y"
        },
        createSeparator("redo-cut-separator"),
        {
          id: "cut",
          text: "Cut",
          onClick: (function () {
              console.log("Cut");
            }),
          hasShortcut: true,
          shortcutValue: "⌘X"
        },
        {
          id: "copy",
          text: "Copy",
          onClick: (function () {
              console.log("Copy");
            }),
          hasShortcut: true,
          shortcutValue: "⌘C"
        },
        {
          id: "paste",
          text: "Paste",
          onClick: (function () {
              console.log("Paste");
            }),
          hasShortcut: true,
          shortcutValue: "⌘V"
        }
      ]
    }
  ];
  var handleItemClick = function (item) {
    console.log("Item clicked:", item);
  };
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsx("h1", {
                      children: "Menu Component",
                      className: "text-2xl font-bold mb-6"
                    }),
                JsxRuntime.jsxs("div", {
                      children: [
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: "Basic Menu",
                                      className: "text-xl font-semibold mb-4"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("button", {
                                              children: "Toggle Menu",
                                              className: "px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600",
                                              onClick: (function (param) {
                                                  setIsOpen(function (prev) {
                                                        return !prev;
                                                      });
                                                })
                                            }),
                                        isOpen ? JsxRuntime.jsx("div", {
                                                children: JsxRuntime.jsx(DesignSystem.Menu, {
                                                      items: basicMenuItems,
                                                      onItemClick: handleItemClick,
                                                      isOpen: isOpen,
                                                      onOpenChange: (function (isOpen) {
                                                          setIsOpen(function (param) {
                                                                return isOpen;
                                                              });
                                                        })
                                                    }),
                                                className: "mt-2 border border-gray-200 rounded shadow-lg"
                                              }) : null
                                      ],
                                      className: "flex flex-col items-start"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: "Menu with Icons",
                                      className: "text-xl font-semibold mb-4"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsx(DesignSystem.Menu, {
                                            items: menuItemsWithIcons,
                                            onItemClick: handleItemClick,
                                            isOpen: true
                                          }),
                                      className: "border border-gray-200 rounded shadow-lg w-64"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: "Multi-select Menu",
                                      className: "text-xl font-semibold mb-4"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsx(DesignSystem.Menu, {
                                            className: "p-2",
                                            type_: "MULTI_SELECT",
                                            items: multiSelectMenuItems,
                                            onItemClick: (function (item) {
                                                var id = item.id;
                                                if (id !== undefined) {
                                                  return handleMultiSelectItemClick(id);
                                                }
                                                
                                              }),
                                            selectedItems: selectedItems,
                                            onSelectionChange: (function (items) {
                                                setSelectedItems(function (param) {
                                                      return items;
                                                    });
                                                console.log("Selection changed via Menu component:");
                                                console.log(items);
                                              }),
                                            isOpen: true
                                          }),
                                      className: "border border-gray-200 rounded shadow-lg w-64"
                                    }),
                                JsxRuntime.jsxs("div", {
                                      children: [
                                        JsxRuntime.jsx("p", {
                                              children: "Click on items to select them. Multiple selections are allowed.",
                                              className: "text-sm text-gray-700"
                                            }),
                                        JsxRuntime.jsx("p", {
                                              children: selectedItems.length === 0 ? "No items selected" : "Selected items: " + Belt_Array.joinWith(selectedItems, ", ", (function (x) {
                                                        return x;
                                                      })),
                                              className: "mt-1 font-medium"
                                            })
                                      ],
                                      className: "mt-2"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: "Menu with Search",
                                      className: "text-xl font-semibold mb-4"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsx(DesignSystem.Menu, {
                                            hasSearch: true,
                                            items: basicMenuItems,
                                            searchPlaceholder: "Search menu items...",
                                            isOpen: true,
                                            searchTerm: match[0],
                                            onSearchTermChange: (function (term) {
                                                setSearchTerm(function (param) {
                                                      return term;
                                                    });
                                              })
                                          }),
                                      className: "border border-gray-200 rounded shadow-lg w-64"
                                    })
                              ]
                            }),
                        JsxRuntime.jsxs("div", {
                              children: [
                                JsxRuntime.jsx("h2", {
                                      children: "Nested Menu (Submenu)",
                                      className: "text-xl font-semibold mb-4"
                                    }),
                                JsxRuntime.jsx("div", {
                                      children: JsxRuntime.jsx(DesignSystem.Menu, {
                                            items: nestedMenuItems,
                                            onItemClick: handleItemClick,
                                            isOpen: true
                                          }),
                                      className: "border border-gray-200 rounded shadow-lg w-64"
                                    })
                              ]
                            })
                      ],
                      className: "space-y-8"
                    })
              ],
              className: "space-y-10 p-6"
            });
}

var make = MenuDemo;

export {
  createSeparator ,
  createMultiSelectItem ,
  make ,
}
/* react Not a pure module */
